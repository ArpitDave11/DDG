Here’s what I’m pulling out from that description, distilled into clear action points:

Only return IP & nickname
Your “ping_test” replacement must return only the reachable VM’s ipAddress and its nickname.
Don’t modify any other VM properties or data structures.
New POC function signature
Create a helper with the same name as the old test (e.g. ping_test(vmList)) so you don’t have to change call sites.
Internally, have it run your round-robin logic and then return { ipAddress, nickname } or null if none found.
Swap-in at the call site
At the one line where you used to call ping_test(vm), call your new function instead.
Capture its two fields (ipAddress, nickname) into local variables for the downstream logic.
VM workbook updates
Immediately after you get back nickname, invoke your workbook routine twice:
On success (non-null), updateVMWorkbook(nickname, 'success')
On failure (null), updateVMWorkbook(null, 'failure')
File-processing trigger & naming
Your pipeline still:
Receives a trigger with a list of files.
Picks each file, processes it.
Appends _success or _failure to its name based on outcome.
Delta-file status log
Create (if missing) and append to a Delta file at /mnt/delta/job_status/ with columns:
fileName, jobId, timestamp, status (success/failure), updateFlag
Call your logJobStatus(fileName, jobId, status, flag) in both branches.
Use parameters, not hard-codes
All values (vmList, timeouts, paths, job IDs, etc.) must come in as function arguments or config entries.
Documentation & comments
Add a one-line docstring to your new POC function explaining inputs/outputs.
Above the swap-in line, comment “// Replaced ping_test with round-robin POC” so it’s obvious.
That way, the only lines you ever touch are:

The single call to ping_test(...) (now your POC).
Two calls to update the VM workbook.
Two calls to log the job status (and rename the file).
Everything else—file loop, notifications, downstream logic—remains exactly as before.
